name: CI

on:
  push:
    branches-ignore:
      - '_archived__**'
  pull_request_target:
    branches-ignore:
      - '_archived__**'
    paths-ignore:
      - '**/README.md'

permissions:
  actions: write
  pull-requests: read

jobs:
  pre_info:
    name: Initial Checks
    runs-on: ubuntu-latest
    outputs:
      skipCI: ${{ steps.checkci.outputs.result }}
      gitSHA: ${{ steps.checkci.outputs.gitSHA }}
    steps:
      - name: Run CI Check
        id: checkci
        env:
          GH_API: ${{ github.event.repository.commits_url }}
          GH_GH: ${{ toJson(github) }}
          GH_SHA: ${{ github.event.after }}
          PR_FIRSTSHA: ${{ github.event.pull_request.head.sha }}
          PR_NUM: ${{ github.event.pull_request.number }}
        run: |
          echo "Run ID    : $GITHUB_RUN_ID"
          echo "Event Name: $GITHUB_EVENT_NAME"
          echo "PR_NUM    : $PR_NUM"
          EXP_REF="ds\/(.*)$"
          if [[ $GITHUB_REF =~ $EXP_REF ]]; then
            GH_REF=${BASH_REMATCH[1]}
          fi
          REF=$([[ $GITHUB_HEAD_REF ]] && echo $GITHUB_HEAD_REF || echo $GH_REF)
          echo "HEAD_REF  : $GITHUB_HEAD_REF"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GH_REF    : $GH_REF"
          echo "Branch    : $REF"
          GH_SHA=$([[ $GH_SHA ]] && echo $GH_SHA || echo $PR_FIRSTSHA)
          echo "gitSHA=$GH_SHA" >> $GITHUB_OUTPUT
          echo "Commit SHA: $GH_SHA"
          echo "PR Head SHA: $PR_FIRSTSHA"
          SKIP_A=$([[ "$REF" == l10n_* ]] && echo true || echo false)
          echo "Starts With l10n_ :  $SKIP_A"
          GH_API=${GH_API/'{/sha}'/}
          echo "API: $GH_API"
          CM=$(curl -s $GH_API/$GH_SHA | jq -r '.commit.message')
          echo "Commit Message: $CM"
          EXP_SKIP="\[ci skip]"
          SKIP_B=$([[ "$CM" =~ $EXP_SKIP ]] && echo true || echo false)
          echo "Skip via Commit: $SKIP_B"
          RES=$([[ $SKIP_A == true || $SKIP_B == true ]] && echo true || echo false)
          echo "Skip CI:  $RES"
          echo "result=$RES" >> $GITHUB_OUTPUT
  all_jobs:
    name: Tests, Builds, Coverage
    runs-on: ubuntu-latest
    needs: pre_info
    if: needs.pre_info.outputs.skipCI == 'false'
    steps:
      - name: Checkout Default Commit
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v3
      - name: Checkout Specific REF Commit
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.pre_info.outputs.gitSHA }}
      - name: Use Node.js 18.x
        id: node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Cache Node Modules
        id: nodeCache
        uses: actions/cache@v3
        with:
          # npm cache files stored in `~/.npm` on Linux
          path: ~/.npm
          key: ${{ runner.os }}-nodejs-${{ steps.node.outputs.node-version }}-npm-${{ hashFiles('**/package.json', '**/package-lock.json') }}
      - name: Install dependencies from cache (npm install --prefer-offline)
        if: steps.nodeCache.outputs.cache-hit == 'true'
        run: npm install --prefer-offline --no-fund
      - name: Install dependencies (npm ci)
        if: steps.nodeCache.outputs.cache-hit != 'true'
        run: npm ci --no-fund
      - name: Run Tests
        run: npm run test -- --verbose
      - name: Run Lint
        run: npm run lint
      - name: Run Build
        run: npm run build
        env:
          GITSHA: ${{ needs.pre_info.outputs.gitSHA }}
      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage
      - name: Coveralls.io Coverage Upload
        id: coveralls_action
        uses: coverallsapp/github-action@v2.0.0
        if: false && github.event_name != 'pull_request_target'
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Coveralls.io Coverage Upload for pull_request_target
        id: coveralls_prt
        uses: coverallsapp/github-action@v2.0.0
        continue-on-error: true
        if: false && github.event_name == 'pull_request_target'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          git-commit: ${{ github.event.pull_request.head.sha }}
      - name: Extract zip builds for individual artifact upload
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        id: extbuilds
        run: |
          for i in *.zip; do echo "${i%.zip}"; done | xargs -I fn unzip fn.zip -d fn
          echo "ffdir=$(ls -d *Firefox)" >> $GITHUB_OUTPUT
          echo "crdir=$(ls -d *Chrome)" >> $GITHUB_OUTPUT
        working-directory: ./builds
      - name: Upload Artifact for Mozilla Firefox Build
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.extbuilds.outputs.ffdir }}
          path: builds/${{ steps.extbuilds.outputs.ffdir }}
      - name: Upload Artifact for Google Chrome Build
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.extbuilds.outputs.crdir }}
          path: builds/${{ steps.extbuilds.outputs.crdir }}